# Function to source files if they exist
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For completions
		completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
		fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		rm $ZDOTDIR/.zccompdump
    fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}

# This function encapsulates the formerly manual process of:
# 1. Checking if updates are available from DNF
# 2. Deciding if I want to update
# 3. Running the updates
function check_dnf_updates() {
    dnf check-update
    if [ $? -eq 100 ]; then # 100 is exit code dnf check-update returns when updates are available
        if read -q "choice?Would you like to proceed with the updates [Y/N] "; then
            echo # This is important so DNF update starts on a new line
            sudo dnf upgrade -y
        else
            echo
            echo "Updates aborted"
        fi
    else
        echo "No updates available in DNF"
    fi
}

function configure_gnome_ime() {
    if [ $(id -u) -ne 0 ]; then
        echo "Please run this function as root"
    else
        sudo cat /home/cucali/.config/zsh/input-config-gnome > /etc/environment
        if [ $? -eq 0 ]; then
            echo "Successfully configured GNOME IME"
        fi
    fi
}

function configure_sway_ime() {
    if [ $(id -u) -ne 0 ]; then
        echo "Please run this function as root"
    else
        sudo cat /home/cucali/.config/zsh/input-config-sway > /etc/environment
        if [ $? -eq 0 ]; then
            echo "Successfully configured Sway IME"
        fi
    fi
}

function configure_window_settings() {
    if [ $1 -eq "sway" ]; then
        gsettings set org.gnome.desktop.wm.preferences button-layout ""
    else
        gsettings set org.gnome.desktop.wm.preferences button-layout ":minimize,maximize,close"
    fi
}

function zsudo() {
    sudo zsh -c "$functions[$1]" "$@"
}

function delete_all_images() {
    ARG=$1
    if read -q "choice?This operation will permanently delete these files. Would you like to proceed? [Y/N] "; then
        echo

        FOLDER="${ARG:-.}"
        rm $FOLDER/*.png
        rm $FOLDER/*.jpg
        rm $FOLDER/*.jpeg
    fi
}

# Code based on https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/sudo.plugin.zsh
function __sudo-replace-buffer() {
  local old=$1 new=$2 space=${2:+ }

  # if the cursor is positioned in the $old part of the text, make
  # the substitution and leave the cursor after the $new text
  if [[ $CURSOR -le ${#old} ]]; then
    BUFFER="${new}${space}${BUFFER#$old }"
    CURSOR=${#new}
  # otherwise just replace $old with $new in the text before the cursor
  else
    LBUFFER="${new}${space}${LBUFFER#$old }"
  fi
}

function sudo_command_line() {
  # If line is empty, get the last run command from history
  [[ -z $BUFFER ]] && LBUFFER="$(fc -ln -1)"

  # Save beginning space
  local WHITESPACE=""
  if [[ ${LBUFFER:0:1} = " " ]]; then
    WHITESPACE=" "
    LBUFFER="${LBUFFER:1}"
  fi

  {
    # If $SUDO_EDITOR or $VISUAL are defined, then use that as $EDITOR
    # Else use the default $EDITOR
    local EDITOR=${SUDO_EDITOR:-${VISUAL:-$EDITOR}}

    # If $EDITOR is not set, just toggle the sudo prefix on and off
    if [[ -z "$EDITOR" ]]; then
      case "$BUFFER" in
        sudo\ -e\ *) __sudo-replace-buffer "sudo -e" "" ;;
        sudo\ *) __sudo-replace-buffer "sudo" "" ;;
        *) LBUFFER="sudo $LBUFFER" ;;
      esac
      return
    fi

    # Check if the typed command is really an alias to $EDITOR

    # Get the first part of the typed command
    local cmd="${${(Az)BUFFER}[1]}"
    # Get the first part of the alias of the same name as $cmd, or $cmd if no alias matches
    local realcmd="${${(Az)aliases[$cmd]}[1]:-$cmd}"
    # Get the first part of the $EDITOR command ($EDITOR may have arguments after it)
    local editorcmd="${${(Az)EDITOR}[1]}"

    # Note: ${var:c} makes a $PATH search and expands $var to the full path
    # The if condition is met when:
    # - $realcmd is '$EDITOR'
    # - $realcmd is "cmd" and $EDITOR is "cmd"
    # - $realcmd is "cmd" and $EDITOR is "cmd --with --arguments"
    # - $realcmd is "/path/to/cmd" and $EDITOR is "cmd"
    # - $realcmd is "/path/to/cmd" and $EDITOR is "/path/to/cmd"
    # or
    # - $realcmd is "cmd" and $EDITOR is "cmd"
    # - $realcmd is "cmd" and $EDITOR is "/path/to/cmd"
    # or
    # - $realcmd is "cmd" and $EDITOR is /alternative/path/to/cmd that appears in $PATH
    if [[ "$realcmd" = (\$EDITOR|$editorcmd|${editorcmd:c}) \
      || "${realcmd:c}" = ($editorcmd|${editorcmd:c}) ]] \
      || builtin which -a "$realcmd" | command grep -Fx -q "$editorcmd"; then
      __sudo-replace-buffer "$cmd" "sudo -e"
      return
    fi

    # Check for editor commands in the typed command and replace accordingly
    case "$BUFFER" in
      $editorcmd\ *) __sudo-replace-buffer "$editorcmd" "sudo -e" ;;
      \$EDITOR\ *) __sudo-replace-buffer '$EDITOR' "sudo -e" ;;
      sudo\ -e\ *) __sudo-replace-buffer "sudo -e" "$EDITOR" ;;
      sudo\ *) __sudo-replace-buffer "sudo" "" ;;
      *) LBUFFER="sudo $LBUFFER" ;;
    esac
  } always {
    # Preserve beginning space
    LBUFFER="${WHITESPACE}${LBUFFER}"

    # Redisplay edit buffer (compatibility with zsh-syntax-highlighting)
    zle && zle redisplay # only run redisplay if zle is enabled
  }
}

function run_updates() {
    PS3="Select which updates you'd like to run: "
    items=("DNF" "Flatpak" "Both")

    select item in "${items[@]}" Quit
    do
        case $REPLY in
            1) check_dnf_updates; break;;
            2) flatpak update; break;;
            3) check_dnf_updates && echo && echo && flatpak update; break;;
            $((${#items[@]} + 1))) break;;
            *) echo "Invalid reply";
        esac
    done
}

function remove_window_buttons() {
    gsettings set org.gnome.desktop.wm.preferences button-layout :
}

function reset_window_buttons() {
    gsettings reset org.gnome.desktop.wm.preferences button-layout
}
